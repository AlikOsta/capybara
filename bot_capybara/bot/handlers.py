import logging
from asgiref.sync import sync_to_async
from django.conf import settings
from django.utils import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes
from app.models import Product
from user_capybara.models import TelegramUser

logger = logging.getLogger(__name__)

@sync_to_async
def get_product_by_id(product_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {product_id}")
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        all_products = list(Product.objects.all().values('id', 'title'))
        logger.info(f"–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ: {all_products}")
        
        product = Product.objects.filter(id=product_id).first()
        if product:
            logger.info(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}, —Å—Ç–∞—Ç—É—Å: {product.status}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            return {
                'id': product.id,
                'title': product.title,
                'price': str(product.price),
                'currency': str(product.currency),
                'category_name': product.category.name
            }
        else:
            logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}", exc_info=True)
        return None
    

@sync_to_async
def get_or_create_user(telegram_id, username, first_name, last_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        user, created = TelegramUser.objects.update_or_create(
            telegram_id=telegram_id,
            defaults={
                'username': username or '',
                'first_name': first_name or '',
                'last_name': last_name or '',
                'last_activity': timezone.now()
            }
        )
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user = update.effective_user
        args = context.args
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")

        if args and args[0].startswith('product_'):

            try:
                product_id = int(args[0].split('_')[1])
                logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–æ–¥—É–∫—Ç —Å ID {product_id}")
                
                product_data = await get_product_by_id(product_id)
                
                if product_data:
                    logger.info(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product_data['title']}")
                    
                    base_url = "https://capybarashop.store"

                    mini_app_url = settings.TELEGRAM_MINI_APP_URL

                    auth_url = f"{base_url}/user/mini-app/?product_id={product_id}"

                    keyboard = [
                        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", web_app=WebAppInfo(url=auth_url))],
                        [InlineKeyboardButton("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=mini_app_url))]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_html(
                        f"<b>{product_data['title']}</b>\n\n"
                        f"–¶–µ–Ω–∞: {product_data['price']} {product_data['currency']}\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data['category_name']}\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await update.message.reply_text(
                        "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
                    )
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                await update.message.reply_text(
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ deep link: {e}", exc_info=True)
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            keyboard = [
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_MINI_APP_URL))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_html(
                f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
                f"–Ø –±–æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ Capybara. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_handler: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )




async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_MINI_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "Capybara - —ç—Ç–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/open - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )

async def open_app_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open."""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_MINI_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_MINI_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )
