import os
import logging
from asgiref.sync import sync_to_async
from django.conf import settings
from telegram import InputMediaPhoto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes, CallbackContext
from app.models import Product, Category, City
from user_capybara.models import TelegramUser


logger = logging.getLogger(__name__)

@sync_to_async
def get_product_by_id(product_id: int) -> dict | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        product = Product.objects.select_related('category').get(id=product_id)
        image_url = f"https://capybarashop.store{product.image.url}" if product.image else None
        author = product.author.get_full_name()
        return {
            'id': product.id,
            'title': product.title,
            'price': product.price,
            'currency': product.currency,
            'description': product.description,
            'category_name': product.category.name,
            'author': author,
            'image_url': image_url, 

        }

    except Product.DoesNotExist:
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    

@sync_to_async
def get_info_count() -> dict | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        count_prod = Product.objects.count()
        count_cat = Category.objects.count()
        count_user = TelegramUser.objects.count()
        count_city = City.objects.count()

        return {
            'count_prod': count_prod,
            'count_cat': count_cat,
            'count_user': count_user,
            'count_city': count_city
        }

    except:
        return None

# @sync_to_async
# def get_or_create_user(telegram_id: int, username: str, first_name: str, last_name: str) -> TelegramUser | None:
#     """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
#     try:
#         user, _ = TelegramUser.objects.update_or_create(
#             telegram_id=telegram_id,
#             defaults={
#                 'username': username or '',
#                 'first_name': first_name or '',
#                 'last_name': last_name or '',
#                 'last_activity': timezone.now()
#             }
#         )
#         return user
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
#         return None

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""

    user = update.effective_user
    args = context.args
    mini_app_url = "https://capybarashop.store/user/mini-app/"

    if args and args[0].startswith('product_'):
        try:
            product_id = int(args[0].split('_')[1])
            product_data = await get_product_by_id(product_id)

            if product_data:
                auth_url = f"https://capybarashop.store/user/mini-app/?product_id={product_id}"

                keyboard = [
                    [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", web_app=WebAppInfo(url=auth_url))],
                    [InlineKeyboardButton("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=mini_app_url))]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                caption = (
                    f"<b>{product_data['title']}</b>\n\n"
                    f"üõí –¶–µ–Ω–∞: {product_data['price']} {product_data['currency']}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data['category_name']}\n\n"
                    f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {product_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü - {product_data.get('author')}\n\n"
                )
                
                image_url = product_data.get("image_url")

                if image_url:
                    await update.message.reply_photo(photo=image_url, caption=caption, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await update.message.reply_html(caption, reply_markup=reply_markup)

            else:

                error__image_path = "https://i.ibb.co/W13Rtfc/error.png"
                keyboard = [
                    [InlineKeyboardButton("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=mini_app_url))]
                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                caption = (
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                )
                await update.message.reply_photo(photo=error__image_path, caption=caption, reply_markup=reply_markup, parse_mode='HTML')

        except ValueError:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞")

            error__image_path = "https://i.ibb.co/W13Rtfc/error.png"
            keyboard = [
                    [InlineKeyboardButton("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=mini_app_url))]
                ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            caption = (
                    f"‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                )

            await update.message.reply_photo(photo=error__image_path, caption=caption, reply_markup=reply_markup, parse_mode='HTML')
        return

    photo = "https://i.ibb.co/zWyhswRv/start.png"

    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=mini_app_url))],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"), InlineKeyboardButton("–û –Ω–∞—Å", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    caption = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Capybara Marketplace\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, "
        f"–æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    )

    await update.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup, parse_mode='HTML')


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
   
    if query.data == "help":
        await help_handler(update, context)
    elif query.data == "info":
        await info_handler(update, context)
    elif query.data == "back_to_start":
        await back_to_start_callback(update, context)

async def back_to_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    user = query.from_user
    
    photo = "https://i.ibb.co/zWyhswR/start.png" 
    
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://capybarashop.store/user/mini-app/"))],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"), InlineKeyboardButton("–û –Ω–∞—Å", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    caption = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Capybara Marketplace!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, "
        f"–æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    )
    
    await query.message.edit_caption(caption=caption, reply_markup=reply_markup, parse_mode='HTML')


async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, photo_url: str, text: str) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]])
    
    if update.callback_query:
        # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = update.callback_query.message
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)
            await message.edit_caption(
                caption=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            chat_id = message.chat_id
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo_url,
                caption=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    else:
        # –î–ª—è –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = update.message
        await message.reply_photo(photo=photo_url, caption=text, reply_markup=reply_markup, parse_mode='HTML')


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    photo = "https://i.ibb.co/N27msW6y/help.png"
    text = (
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Capybara</b>\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ Capybara Marketplace –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Å–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏.\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Telegram –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.\n"
        "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ, –Ω–æ –∏ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É –ø–æ–∫—É–ø–∫—É –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.\n"
        "–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –º—ã —ç–∫–æ–Ω–æ–º–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='t.me/A43721'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
    )
    
    await handle_command(update, context, photo, text)


async def info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info."""
    photo = "https://i.ibb.co/ZpTx5g8b/info.png"
    data = await get_info_count()
    
    text = (
        f"<b>–†–∞—Å—Å–∫–∞–∂—É –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ —Å–µ—Ä–≤–∏—Å Capybara Marketplace</b>\n\n"
        f"Capybara Marketplace ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram.\n"
        f"–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –¥–µ—Å—è—Ç–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —á–∞—Ç–∞—Ö ‚Äî –º—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
        
        f"üë• –£–∂–µ –±–æ–ª–µ–µ {data['count_user']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n"
        f"üìà –£ –Ω–∞—Å –±–æ–ª–µ–µ {data['count_prod']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {data['count_cat']} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n"
        f"üèò –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ {data['count_city']} –≥–æ—Ä–æ–¥–∞—Ö –ê—Ä–≥–µ–Ω—Ç–∏–Ω—ã.\n\n"
        
        f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–∞–∫ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.\n"
        f"–¶–µ–Ω–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–π.\n\n"
        
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='t.me/A43721'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
    )
    
    await handle_command(update, context, photo, text)



async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    keyboard = [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_MINI_APP_URL))]]
    await update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
