import asyncio
import logging
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
import os

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    LabeledPrice,
    PreCheckoutQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    WebAppInfo,
)
from aiogram.client.default import DefaultBotProperties
from app.models import Product, Category, City
from user_capybara.models import TelegramUser

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

prices = [LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚≠êÔ∏è", amount=100)]

START_PHOTO_URL = os.getenv("PHOTO_START")
ABOUT_PHOTO_URL = os.getenv("PHOTO_INFO")
HELP_PHOTO_URL = os.getenv("PHOTO_HELP")
DONATE_PHOTO_URL = os.getenv("PHOTO_DONATE")
THANKS_PHOTO_URL = os.getenv("PHOTO_THANKS")
ERROR_PHOTO_URL = os.getenv("PHOTO_ERROR")

URL = os.getenv("TELEGRAM_MINI_APP_URL")
BASE_URL = os.getenv("BASE_URL", "")
SAPPORT_URL = os.getenv("SUPPORT_URL")

@sync_to_async
def get_info_count() -> dict | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        count_prod = Product.objects.count()
        count_cat = Category.objects.count()
        count_user = TelegramUser.objects.count()
        count_city = City.objects.count()

        return {
            'count_prod': count_prod,
            'count_cat': count_cat,
            'count_user': count_user,
            'count_city': count_city
        }
    except Exception as e:
        logging.error(f"Error getting counts: {e}")
        return None

@sync_to_async
def get_product_by_id(product_id: int) -> dict | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        product = Product.objects.select_related('category').get(id=product_id)
        image_url = f"{BASE_URL}{product.image.url}" if product.image else None
        author = product.author.get_full_name()
        return {
            'id': product.id,
            'title': product.title,
            'price': product.price,
            'currency': product.currency,
            'description': product.description,
            'category_name': product.category.name,
            'author': author,
            'image_url': image_url, 
        }
    except Product.DoesNotExist:
        logging.error(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        logging.error(f"Error getting product: {e}")
        return None

def start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=URL)
        )],
        [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"),
        InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚≠êÔ∏è", callback_data="pay")],
    ])

back_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await bot.delete_webhook(drop_pending_updates=True)
    user = message.from_user
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if args and args[0].startswith('product_'):
        try:
            product_id = int(args[0].split('_')[1])
            product_data = await get_product_by_id(product_id)

            if product_data:
                auth_url = f"{URL}?product_id={product_id}"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", web_app=WebAppInfo(url=auth_url))],
                    [InlineKeyboardButton(text="–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=URL))]
                ])

                caption = (
                    f"<b>{product_data['title']}</b>\n\n"
                    f"üõí –¶–µ–Ω–∞: {product_data['price']} {product_data['currency']}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data['category_name']}\n\n"
                    f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {product_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü - {product_data.get('author')}\n\n"
                )
                
                image_url = product_data.get("image_url")

                if image_url:
                    await message.answer_photo(photo=image_url, caption=caption, reply_markup=keyboard)
                else:
                    await message.answer(caption, reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=URL))]
                ])

                caption = (
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                )
                await message.answer_photo(photo=ERROR_PHOTO_URL, caption=caption, reply_markup=keyboard)

        except ValueError:
            logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=URL))]
            ])
            caption = f"‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            await message.answer_photo(photo=ERROR_PHOTO_URL, caption=caption, reply_markup=keyboard)
        return

    await message.answer_photo(
        photo=START_PHOTO_URL,
        caption=(
            f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Capybara Marketplace\n\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, "
            f"–æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
        ),
        reply_markup=start_keyboard()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer_photo(
        photo=HELP_PHOTO_URL,
        caption=(
            "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Capybara</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ Capybara Marketplace –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Å–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏.\n"
            "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Telegram –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.\n"
            "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ, –Ω–æ –∏ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É –ø–æ–∫—É–ø–∫—É –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.\n"
            "–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –º—ã —ç–∫–æ–Ω–æ–º–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='{SAPPORT_URL}'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
        ),
        reply_markup=back_kb
    )

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    data = await get_info_count() or {'count_prod': 'XXX', 'count_cat': 'XXX', 'count_user': 'XXX', 'count_city': 'XXX'}
    
    await message.answer_photo(
        photo=ABOUT_PHOTO_URL,
        caption=(
            f"<b>–†–∞—Å—Å–∫–∞–∂—É –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ —Å–µ—Ä–≤–∏—Å Capybara Marketplace</b>\n\n"
            f"Capybara Marketplace ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram.\n"
            f"–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –¥–µ—Å—è—Ç–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —á–∞—Ç–∞—Ö ‚Äî –º—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
            
            f"üë• –£–∂–µ –±–æ–ª–µ–µ {data['count_user']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n"
            f"üìà –£ –Ω–∞—Å –±–æ–ª–µ–µ {data['count_prod']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {data['count_cat']} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n"
            f"üèò –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ {data['count_city']} –≥–æ—Ä–æ–¥–∞—Ö –ê—Ä–≥–µ–Ω—Ç–∏–Ω—ã.\n\n"
            
            f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–∞–∫ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.\n"
            f"–¶–µ–Ω–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–π.\n\n"
            
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='{SAPPORT_URL}'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
        ),
        reply_markup=back_kb
    )

@dp.callback_query(F.data == "about")
async def callback_about(query: types.CallbackQuery):
    data = await get_info_count() or {'count_prod': 'XXX', 'count_cat': 'XXX', 'count_user': 'XXX', 'count_city': 'XXX'}
    
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=ABOUT_PHOTO_URL,
            caption=(
                f"<b>–†–∞—Å—Å–∫–∞–∂—É –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ —Å–µ—Ä–≤–∏—Å Capybara Marketplace</b>\n\n"
                f"Capybara Marketplace ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram.\n"
                f"–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –¥–µ—Å—è—Ç–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —á–∞—Ç–∞—Ö ‚Äî –º—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
                
                f"üë• –£–∂–µ –±–æ–ª–µ–µ {data['count_user']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n"
                f"üìà –£ –Ω–∞—Å –±–æ–ª–µ–µ {data['count_prod']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {data['count_cat']} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n"
                f"üèò –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ {data['count_city']} –≥–æ—Ä–æ–¥–∞—Ö –ê—Ä–≥–µ–Ω—Ç–∏–Ω—ã.\n\n"
                
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–∞–∫ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.\n"
                f"–¶–µ–Ω–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–π.\n\n"
                
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='{SAPPORT_URL}'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
            )
        ),
        reply_markup=back_kb
    )
    await query.answer()

@dp.callback_query(F.data == "help")
async def callback_help(query: types.CallbackQuery):
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=HELP_PHOTO_URL,
            caption=(
                "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Capybara</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ Capybara Marketplace –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Å–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏.\n"
                "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Telegram –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.\n"
                "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ, –Ω–æ –∏ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É –ø–æ–∫—É–ø–∫—É –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.\n"
                "–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –º—ã —ç–∫–æ–Ω–æ–º–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º <a href='{SAPPORT_URL}'>–ö–æ–º–∞–Ω–¥–∞ Capybara</a>"
            )
        ),
        reply_markup=back_kb
    )
    await query.answer()

@dp.callback_query(F.data == "pay")
async def callback_pay(query: types.CallbackQuery):
    await bot.send_invoice(
        chat_id=query.message.chat.id,
        title="–î–æ–Ω–∞—Ç –ø—Ä–æ–µ–∫—Ç—É",
        description="–í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–π–¥—É—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ!",
        payload="donate_payload",
        provider_token=os.getenv("PAYMENT_PROVIDER_TOKEN", ""),  
        currency="XTR",
        prices=prices,
    )
    await query.answer()


@dp.pre_checkout_query(F.invoice_payload == "donate_payload")
async def pre_checkout(query: PreCheckoutQuery):
    await query.answer(ok=True)


@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    total = message.successful_payment.total_amount / 100
    await message.answer_photo(
        photo=THANKS_PHOTO_URL,
        caption=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç ‚≠êÔ∏è {total:.2f} XTR! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ—Å—Ü–µ–Ω–Ω–∞.",
        reply_markup=back_kb
    )


@dp.callback_query(F.data == "back")
async def callback_back(query: types.CallbackQuery):
    user = query.from_user
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=START_PHOTO_URL,
            caption=(
                f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Capybara Marketplace\n\n"
                f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, "
                f"–æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
            )
        ),
        reply_markup=start_keyboard()
    )
    await query.answer()


@dp.message()
async def handle_all_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=URL))]
    ])
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", 
                         reply_markup=keyboard)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

